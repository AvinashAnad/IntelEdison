// This code automatically generated by TableCodeGen
using UnityEngine;
using System.Collections;
using System.Collections.Generic;

public class id : MonoBehaviour {
	public TextAsset File;

	void FixedUpdate()
	{
		Load(File);
		Debug.Log (yaw_pitch_roll()[0]);
		List<float> motion = new List<float> ();
		motion = yaw_pitch_roll();
		float roll = motion [0];
		float pitch = motion [1];
		float yaw = motion [2];
		//transform.Rotate (1, 1, 0);

		//transform.Rotate(Vector3(1,0,1));

		transform.Rotate (roll,pitch,yaw);

	}

		public class Row
		{
			public string id;
			public string  roll;
			public string  pitch;
			public string  yaw;

		}
	    
	    public int i = 0;

	    public List<float> yaw_pitch_roll()
		{
			float new_yaw, new_pitch, new_roll = 0; 
		    string k_yaw, k_pitch, k_roll;
			
		 while (i < NumRows ()) {	
			string stringy_i = i.ToString ();
			k_yaw = Find_id (stringy_i).yaw;
			k_pitch = Find_id (stringy_i).pitch;
			k_roll = Find_id (stringy_i).roll;
			new_yaw = float.Parse (k_yaw);
			new_pitch = float.Parse (k_pitch);
			new_roll = float.Parse (k_roll);
			i++;
			List<float> motion_data = new List<float> ();
			motion_data.Add (new_yaw);
			motion_data.Add (new_pitch);
			motion_data.Add (new_roll);

			return motion_data;
			}

		List<float> motion_ = new List<float> ();
			
		return motion_;
	
		}
	
		List<Row> rowList = new List<Row>();
		bool isLoaded = false;

		public bool IsLoaded()
		{
			return isLoaded;
		}

		public List<Row> GetRowList()
		{
			return rowList;
		}

		public void Load(TextAsset csv)
		{
			rowList.Clear();
			string[][] grid = CsvParser2.Parse(csv.text);
			for(int i = 1 ; i < grid.Length ; i++)
			{
				Row row = new Row();
				row.id = grid[i][0];
				row. roll = grid[i][1];
				row. pitch = grid[i][2];
				row. yaw = grid[i][3];

				rowList.Add(row);
			}
			isLoaded = true;
		}

		public int NumRows()
		{
			return rowList.Count;
		}

		public Row GetAt(int i)
		{
			if(rowList.Count <= i)
				return null;
			return rowList[i];
		}

		public Row Find_id(string find)
		{
			return rowList.Find(x => x.id == find);
		}
		public List<Row> FindAll_id(string find)
		{
			return rowList.FindAll(x => x.id == find);
		}
		public Row Find_roll(string find)
		{
			return rowList.Find(x => x. roll == find);
		}
		public List<Row> FindAll_roll(string find)
		{
			return rowList.FindAll(x => x. roll == find);
		}
		public Row Find_pitch(string find)
		{
			return rowList.Find(x => x. pitch == find);
		}
		public List<Row> FindAll_pitch(string find)
		{
			return rowList.FindAll(x => x. pitch == find);
		}
		public Row Find_yaw(string find)
		{
			return rowList.Find(x => x. yaw == find);
		}
		public List<Row> FindAll_yaw(string find)
		{
			return rowList.FindAll(x => x. yaw == find);
		}

	}